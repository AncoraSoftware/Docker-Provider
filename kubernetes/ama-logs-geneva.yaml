apiVersion: v1
kind: ServiceAccount
metadata:
  name: ama-logs
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ama-logs-reader
rules:
  - apiGroups: [""]
    resources:
      [
        "pods",
        "events",
        "nodes",
        "nodes/stats",
        "nodes/metrics",
        "nodes/spec",
        "nodes/proxy",
        "namespaces",
        "services",
        "persistentvolumes"
      ]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["apps", "extensions", "autoscaling"]
    resources: ["replicasets", "deployments", "horizontalpodautoscalers"]
    verbs: ["list"]
  # Uncomment below lines if AddonResizer VPA enabled
  # - apiGroups: ["apps"]
  #   resources: ["deployments"]
  #   resourceNames: [ "ama-logs-rs" ]
  #   verbs: ["get", "patch"]
  # Uncomment below lines for MSI Auth Mode  testing
  # - apiGroups: [""]
  #   resources: ["secrets"]
  #   resourceNames: [ "aad-msi-auth-token" ]
  #   verbs: ["get", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: amalogsclusterrolebinding
subjects:
  - kind: ServiceAccount
    name: ama-logs
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: ama-logs-reader
  apiGroup: rbac.authorization.k8s.io
---
# Uncomment below lines for MSI Auth Mode  testing
# apiVersion: v1
# kind: Secret
# metadata:
#   name: aad-msi-auth-token
#   namespace: kube-system
# type: Opaque
# data:
#   token: "VALUE_MSI_TOKEN"
# ---
apiVersion: apps/v1
kind: DaemonSet
metadata:
 name: geneva-logs-windows
 namespace: kube-system
 labels:
  component: geneva-logs-agent-windows
  tier: node-win
spec:
 updateStrategy:
  type: RollingUpdate
 selector:
  matchLabels:
    component: geneva-logs-agent-windows
    tier: node-win
 template:
  metadata:
    labels:
      component: geneva-logs-agent-windows
      tier: node-win
    annotations:
      agentVersion: "0.0.0-0"
      dockerProviderVersion: "18.0.1-0"
      schema-versions: "v1"
  spec:
    serviceAccountName: ama-logs
    dnsConfig:
      options:
        - name: ndots
          value: "3"
    securityContext:
      windowsOptions:
        hostProcess: true
        runAsUserName: "NT AUTHORITY\\SYSTEM"
    hostNetwork: true
    containers:
     - name: geneva-logs-windows
       image: "VALUE_IMAGE_NAME"
       imagePullPolicy: IfNotPresent
       resources:
        limits:
         cpu: 500m
         memory: 600Mi
       command:
       - powershell
       - -command
       - |
         $mainScriptPath = "opt\amalogswindows\scripts\powershell\main.ps1"
         $containerRoot = Get-Location
         while(($containerRoot -ne "") -and (!(Test-Path (Join-Path $containerRoot $mainScriptPath)))){
           $containerRoot = Split-Path -Path $containerRoot
         }
         if ($containerRoot -eq ""){
           Write-Host "Unable to find host process container root path"
           exit
         }
         Write-Host "Container root: $containerRoot"
         [System.Environment]::SetEnvironmentVariable("CONTAINER_ROOT", $containerRoot , "Process")
         powershell (Join-Path $containerRoot $mainScriptPath)
       env:
        # azure devops pipeline uses AKS_RESOURCE_ID and AKS_REGION hence ensure to uncomment these
        - name: AKS_RESOURCE_ID
          value: "VALUE_AKS_RESOURCE_ID_VALUE"
        - name: AKS_REGION
          value: "VALUE_AKS_RESOURCE_REGION_VALUE"
        - name: CONTROLLER_TYPE
          value: "DaemonSet"
        - name: HOSTNAME
          valueFrom:
             fieldRef:
               fieldPath: spec.nodeName
        - name: PODNAME
          valueFrom:
             fieldRef:
              fieldPath: metadata.name
        - name: NODE_IP
          valueFrom:
             fieldRef:
               fieldPath: status.hostIP
        # Update this with the user assigned msi client id for geneva-logs
        - name: USER_ASSIGNED_IDENTITY_CLIENT_ID
          value: "VALUE_USER_ASSIGNED_IDENTITY_CLIENT_ID_VALUE"
        # Add this only for clouds that require cert bootstrapping
        # - name: REQUIRES_CERT_BOOTSTRAP
        #   value: "true"
        # Uncomment below lines for MSI Auth Mode  testing
        # - name: USING_AAD_MSI_AUTH
        #   value: "true"
       livenessProbe:
        exec:
          command:
            - cmd
            - /c
            - C:\opt\amalogswindows\scripts\cmd\livenessprobe.exe
            - fluent-bit.exe
            - fluentdwinaks
            - "C:\\etc\\amalogswindows\\filesystemwatcher.txt"
            - "C:\\etc\\amalogswindows\\renewcertificate.txt"
        periodSeconds: 60
        initialDelaySeconds: 180
        timeoutSeconds: 15
    affinity:
     nodeAffinity:
       requiredDuringSchedulingIgnoredDuringExecution:
         nodeSelectorTerms:
         - matchExpressions:
           - key: kubernetes.io/os
             operator: In
             values:
             - windows
    tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Exists"
    - operator: "Exists"
      effect: NoExecute
    - operator: "Exists"
      effect: NoSchedule
    - operator: "Exists"
      effect: PreferNoSchedule
