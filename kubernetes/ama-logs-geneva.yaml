apiVersion: apps/v1
kind: DaemonSet
metadata:
 name: geneva-logs-windows
 namespace: kube-system
 labels:
  component: geneva-logs-agent-windows
  tier: node-win
spec:
 updateStrategy:
  type: RollingUpdate
 selector:
  matchLabels:
    component: geneva-logs-agent-windows
    tier: node-win
 template:
  metadata:
    labels:
      component: geneva-logs-agent-windows
      tier: node-win
    annotations:
      agentVersion: "0.0.0-0"
      dockerProviderVersion: "18.0.1-0"
      schema-versions: "v1"
  spec:
    dnsConfig:
      options:
        - name: ndots
          value: "3"
    securityContext:
      windowsOptions:
        hostProcess: true
        runAsUserName: "NT AUTHORITY\\SYSTEM"
    hostNetwork: true
    containers:
     - name: geneva-logs-windows
       image: "VALUE_IMAGE_NAME"
       imagePullPolicy: IfNotPresent
       resources:
        limits:
         cpu: 500m
      #    memory: 600Mi
      #  command:
      #  - powershell
      #  - -command
      #  - |
      #    $mainScriptPath = "opt\amalogswindows\scripts\powershell\main.ps1"
      #    $containerRoot = Get-Location
      #    while(($containerRoot -ne "") -and (!(Test-Path (Join-Path $containerRoot $mainScriptPath)))){
      #      $containerRoot = Split-Path -Path $containerRoot
      #    }
      #    if ($containerRoot -eq ""){
      #      Write-Host "Unable to find host process container root path"
      #      exit
      #    }
      #    Write-Host "Container root: $containerRoot"
      #    [System.Environment]::SetEnvironmentVariable("CONTAINER_ROOT", $containerRoot , "Process")
      #    powershell (Join-Path $containerRoot $mainScriptPath)
       env:
        # azure devops pipeline uses AKS_RESOURCE_ID and AKS_REGION hence ensure to uncomment these
        - name: AKS_RESOURCE_ID
          value: "VALUE_AKS_RESOURCE_ID_VALUE"
        - name: AKS_REGION
          value: "VALUE_AKS_RESOURCE_REGION_VALUE"
        - name: CONTROLLER_TYPE
          value: "DaemonSet"
        - name: HOSTNAME
          valueFrom:
             fieldRef:
               fieldPath: spec.nodeName
        - name: PODNAME
          valueFrom:
             fieldRef:
              fieldPath: metadata.name
        - name: NODE_IP
          valueFrom:
             fieldRef:
               fieldPath: status.hostIP
    affinity:
     nodeAffinity:
       requiredDuringSchedulingIgnoredDuringExecution:
         nodeSelectorTerms:
         - matchExpressions:
           - key: kubernetes.io/os
             operator: In
             values:
             - windows
    tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Exists"
    - operator: "Exists"
      effect: NoExecute
    - operator: "Exists"
      effect: NoSchedule
    - operator: "Exists"
      effect: PreferNoSchedule
